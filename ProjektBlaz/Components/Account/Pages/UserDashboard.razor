@page "/UserDashboard"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ProjektBlaz.Data
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Your Dashboard</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (user == null)
{
    <p>User not found. Redirecting...</p>
}
else
{
    

    @if (user.Email == "administrator@gmail.com")
    {
        <h1>Welcome, Administrator!</h1>
        <h3>All Users:</h3>
        <ul>
            @foreach (var dbUser in allUsers)
            {
                <li>@dbUser.UserName (@dbUser.Email) - @(dbUser.EmailConfirmed ? "Confirmed" : "Not Confirmed")</li>
            }
        </ul>
    }
    else
    {
        <h1>Welcome, @user.UserName!</h1>
        <h3>Your Recent Activities:</h3>
        <ul>
            <li>Activity 1</li>
            <li>Activity 2</li>
            <li>Activity 3</li>
        </ul>
    }
}

@code {
    private ApplicationUser? user;
    private bool isLoading = true;
    private List<ApplicationUser> allUsers = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = await UserManager.GetUserAsync(authState.User);

        if (currentUser != null)
        {
            user = currentUser;

            // Hardcode the check for admin email (administrator@gmail.com)
            if (user.Email == "administrator@gmail.com")
            {
                // Fetch all users from the database
                allUsers = await UserManager.Users.ToListAsync();
            }

            // If the user is not confirmed, redirect
            if (!user.EmailConfirmed)
            {
                await Task.Delay(500);
                NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
                return;
            }
        }
        else
        {
            await Task.Delay(500);
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task LogoutUser()
    {
        await SignInManager.SignOutAsync();
        NavigationManager.NavigateTo("/Account/Login");
    }
}
